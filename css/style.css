/* 
&display=swap
&subset=cyrillic-ext 
*/

/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html,
body {
	height: 100%;
}
html {
	font-size: 16px; /* по умолчанию */
}
body {
	line-height: 1;
	/* color: #000; */
	/* font-family:""; */
	overflow-x: hidden;
	font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;
	background-color: #333;
}
.wrapper {
	min-height: 100%;
	padding: 30px;
}
/* ------------------------------ */
.link {
	color: yellow;
	font-size: 14px;
}
.link:hover {
	color: red;
	font-size: 20px;
}

/*
CSS – переходы либо CSS – transitions могут применяться ко всем элементам и даже к псевдоэлементам. Используются для оживления нашей верстки. Что в свою очередь приводит к улучшению взаимодействия с пользователем, как правило путем приятной анимированной реакции на его действия. Например – наведение и нажатие на кнопку. Также свойства transition можно использовать для построения несложных сценариев анимации. Фактически, CSS – переходы обеспечивают смену значений других свойств с определенной анимацией и сценарием. Всю эту магию можно описать универсальным CSS-свойством transition, либо рядом следующих отдельных свойств: 
*/
.link_anim {
	/* transition-duration: 0.2s;
	transition-property: all;
	transition-delay: 0s;
	transition-timing-function: ease; */

	/*! transition-duration: 0.2s; */
	/*
Определяет промежуток времени, в течение которого должен осуществляться переход. Собственно – тут мы указываем время за которое одно значение свойства по переходит (анимируется) в другое. Свойство не наследуется.
*/
	/*! transition-property: all; */
	/*
Содержит название CSS-свойств, к которым будет применен эффект перехода. Значение свойства может содержать как одно свойство, так и список свойств через запятую. Свойство не наследуется.	
*/
	/*! transition-delay: 0s; */
	/*
	Задержка выполнения перехода. Позволяет сделать так, чтобы изменение свойства происходило не моментально, а с некоторой задержкой. Время задержки перехода указывается в секундах или миллисекундах. Свойство не наследуется.
	*/
	/*! transition-timing-function: ease; */

	/* Универсальное свойство */
	/* Порядок значений:
	property duration timing-function delay 
	*/
	/* transition: background-color 1s ease 0.5s, padding 5s ease-out 0s; */
	/* transition: color 0.3s ease 0s, font-size 1.2s ease-in 0.5s; */
	transition: 0.3s;
}

.button {
	display: inline-block;
	color: #fff;
	background-color: green;
	border-radius: 10px;
	padding: 10px 15px;
	box-shadow: 0 5px 0px rgba(0, 0, 0, 0.3);
	transition: 0.3s;
}
.button:hover {
	transform: translate(0, 4px);
	box-shadow: 0 2px 0px rgba(0, 0, 0, 0.3);
}

.menu {
	overflow: hidden;
}
.menu:hover .menu__list {
	transform: translate(0%);
	transition: 0.8s;
	transition-delay: 0s;
}
.menu:hover .menu__item {
	transform: translate(0%);
}
.menu__list {
	background-color: green;
	padding: 15px;
	transform: translateX(-100%);
	transition: 0.3s;
	transition-delay: 0.8s;
}
.menu__item {
	transform: translateX(-100%);
	transition-duration: 0.6s;
}
.menu .menu__item:nth-child(1) {
	transition-delay: 0s;
}
.menu .menu__item:nth-child(2) {
	transition-delay: 0.2s;
}
.menu .menu__item:nth-child(3) {
	transition-delay: 0.4s;
}
.menu .menu__item:nth-child(4) {
	transition-delay: 0.6s;
}
.menu__item:not(:last-child) {
	margin: 0px 0px 10px 0px;
}
.menu__link {
	color: #fff;
}
/* ---------------------------- */

/*
Как и CSS свойство плавных переходов transition, о котором мы говорили выше, свойство animation призвано сделать нашу верстку более динамичной, оживить её для лучшего взаимодействия с пользователем и создания WOW эффекта.

Но в отличие от CSS переходов, создание анимации базируется на ключевых кадрах @keyframes, которые позволяют автоматически воспроизводить и повторять эффекты на протяжении заданного времени, а также приостанавливать анимацию по определенному событию.

Другими словами, использование конструкции animation и @keyframes позволяет нам создавать более сложные сценарии анимаций.
*/

.block {
	width: 150px;
	height: 150px;
	background-color: #33b854;
	line-height: 150px;
	text-align: center;
	transform: translate(100px, 0);

	animation-name: somename;
	/*
	Определяет список применяемых к элементу анимаций (ключевых кадров). Можно указать через запятую. Причем приоритет у последней записи.
	*/
	animation-duration: 3s;
	/*
	Отвечает за продолжительность анимации.
	*/
	animation-timing-function: linear;
	/*
	Задаёт сценарий развития анимации между ключевыми кадрами.
	*/
	animation-delay: 0s;
	/*
	Отвечает за задержку перед проигрыванием.
	*/
	animation-iteration-count: 1;
	/*
	Отвечает за повтор проигрывания ключевых кадров. По-умолчанию значение 1.
	*/
	animation-direction: alternate;
	/*
	Определяет направление и тип проигрывания ключевых кадров.
	*/
	/* 
	normal, reverse, alternate, alternate-reverse 
	*/
	animation-fill-mode: both;
	/*
	Определяет какие значения анимируемых css свойств применятся к объекту после завершения анимации.
	*/
	animation-play-state: running;
	/*
	Позволяет запускать или останавливать анимацию по событию.
	*/
}
.block:hover {
	animation-play-state: paused;
}

@keyframes somename {
	0% {
		transform: translate(0, 0);
	}
	100% {
		transform: translate(300px, 0);
	}
}

/* ----------------------------------------------- */

.block1 {
	width: 150px;
	height: 150px;
	background-color: #33b854;
	line-height: 150px;
	text-align: center;
	position: relative;
	animation-duration: 5s;
	animation-delay: 0s;
	animation-timing-function: linear;
	animation-iteration-count: infinite;
	animation-name: justname;
	margin-top: 100px;
}
.block1::before {
	content: '';
	width: 100%;
	height: 100%;
	background-color: #3e6849;
	transform: rotate(45deg);
	position: absolute;
	top: 0;
	left: 0;
}

@keyframes justname {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

.block2 {
	width: 150px;
	height: 150px;
	background-color: #33b854;
	animation-duration: 5s;
	position: relative;
	animation-name: sun;
	animation-timing-function: linear;
	animation-iteration-count: infinite;
	margin-top: 35px;
	animation-delay: 0.3s;
}
.block2::before {
	content: '';
	width: 150px;
	height: 150px;
	background-color: #295032;
	animation-duration: 5s;
	position: absolute;
	transform: rotate(45deg);
}
@keyframes sun {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-360deg);
	}
}

/* ------------------------------ */

.circle {
	width: 200px;
	height: 200px;
	background-color: #fff;
}
.circle__body {
	width: 80px;
	height: 80px;
	border-radius: 50%;
	border: 2px solid #000;
	background-color: #fff;
	position: relative;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	transition: 0.5s;
}
.circle__body:hover {
	width: 160px;
	height: 160px;
	outline: 3px solid #000000;
	border: 2px solid #fff;
	background-color: #000000;
}

.moon {
	width: 100%;
	height: 500px;
	background-color: #fff;
	padding: 15px;
}
.moon__block {
	width: 500px;
}
.moon__left {
	display: inline-block;
	width: 210px;
	height: 210px;
	border-radius: 50%;
	background-color: #ffffff;
	position: relative;
	left: 209px;
	z-index: 2;
}
.moon__right {
	display: inline-block;
	width: 200px;
	height: 200px;
	border-radius: 50%;
	background-color: #000000;
	/* position: relative; */
}
.moon__block:hover .moon__right {
	animation-name: moon;
	animation-duration: 5s;
	animation-fill-mode: forwards;
}
.moon__block:hover .moon__left {
	animation-name: moonq;
	animation-duration: 5s;
	animation-fill-mode: forwards;
}
@keyframes moon {
	0% {
		transform: translate(0, 0);
	}
	50% {
		transform: translate(50px, 0);
	}
	60% {
		transform: translate(70px, 0);
	}
	75% {
		transform: translate(50px, 0);
	}
	90% {
		transform: translate(70px, 0);
	}
	100% {
		transform: translate(50px, 0);
	}
}

@keyframes moonq {
	0% {
		transform: translate(0, 0);
	}
	50% {
		transform: translate(-10px, 10px);
		width: 200px;
	}
	60% {
		transform: translate(10px, -10px);
		width: 200px;
	}
	75% {
		transform: translate(-10px, 10px);
		width: 200px;
	}
	90% {
		transform: translate(10px, -10px);
	}
	100% {
		transform: translate(-10px, 10px);
		width: 200px;
	}
}
